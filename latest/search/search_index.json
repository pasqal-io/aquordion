{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>Aquordion</code>","text":"<p><code>Aquordion</code> is a library to test and benchmark Pasqal's backends.</p>"},{"location":"#cross-backend-testing","title":"Cross-backend testing","text":"<p>Run the following to check correctness between backends:</p> <pre><code>hatch -e tests run test\n</code></pre>"},{"location":"#timing-benchmarks","title":"Timing benchmarks","text":"<p>Run the following command to generate timings:</p> <pre><code>hatch -e tests run benchmarks\n</code></pre>"},{"location":"benchmarks/","title":"Stats","text":"<p>We generate time stats using <code>pytest-benchmark</code> using \\(10\\) rounds for circuits A, B, C coming from  [^1]. The current execution times are for circuits defined over \\(2, 5, 10, 15\\) qubits and \\(2, 5\\) layers. So far, we benchmark between <code>PyQTorch</code> and <code>Horqrux</code> the <code>run</code> and <code>expectation</code> methods.</p> <pre><code>frame['fn_circuit'] = frame['benchmark_circuit'].apply(str)\n</code></pre>"},{"location":"benchmarks/#run-method","title":"Run method","text":"<p>Here are the median execution times for the <code>run</code> method over a random state.</p> <pre><code>\n</code></pre>"},{"location":"benchmarks/#expectation-method-z0-observable","title":"Expectation method: Z(0) observable","text":"<p>Here are the median execution times for the <code>expectation</code> method over a random state and the \\(Z(0)\\) observable.</p> <pre><code>\n</code></pre> <p>[^1]: Tyson Jones, Julien Gacon, Efficient calculation of gradients in classical simulations of variational quantum algorithms (2020)</p>"}]}